#Day 3: Operators (30 Days of python programming)
from re import X
from tkinter import SEPARATOR
from cmd import PROMPT

age = 20
height = 167.4
# The complex() function; returns a complex number by a specifiying a real number & an imaginary number 
# syntax: value(x) = complex(real, imaginary) 
# Parameter Values : 
# real - Required. A number representing the real part of the complex number. 
#        Default 0. The real number can also be a String, like this '3+5j', when this is the case, the second parameter should be omitted.
# imaginary - Optional. A number representing the imaginary part of the complex number. Default 0.

comp_num1 = complex(20, 16)
print("Complex number: ", comp_num1)

#Calculate Area of Triangle (user-input)
print("Enter base & height of Triangle: ") # Provide statements & questions before user-input!
base = int(input())
height = int(input())
area_of_triangle = 0.5*base*height
print("Area of Triangle: ", area_of_triangle)
 
#Calculate the Perimeter of Triangle (user-input)
print("Enter Side, Base & Side of triangle: ")
side_a = int(input())
side_b = int(input())
side_c = int(input())
perimetter_of_triangle = side_a + side_b + side_c
print("Perimeter of Triangle: ", perimetter_of_triangle)

# Calculate the Area and Perimeter of Rectangle (user-input)
print("Enter lenght & width rectangle: ") #fixed
length = int(input())
width = int(input())
area_of_rect = length*width
perimeter_of_rect = 2*(length + width)
print("Area of rectangle: ", area_of_rect) #fixed
print("Perimeter of rectangle: ", perimeter_of_rect) #fixed

# Calculate the radius of Circle (user-input)
print("Enter radius of circle for [Area & Circumference]: ")
user_radius = int(input())

#Calculate Area and Circumfrence of Cirlce
def area(r):
    pi=3.14
    return pi*r*r

circle_area = area(user_radius)
print("Area of Circle: ", circle_area)

def circumference(r):
    pi=3.14
    return 2*pi*r

circle_circumference = circumference(user_radius)
print("Circumference of Circle: ", circle_circumference)

# Calculate the slope, of x-intercept & y-intercept where (y = 2x - 2) [equation : y = mx + c] 

# Slope - (Q'8)
def getSlope(x1, y1, x2, y2):
    slope = (y2-y1)/(x2-x1)
    return slope

slope = getSlope(1, 0, 0, -2)
print(slope)
